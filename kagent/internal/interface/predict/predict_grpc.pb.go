// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: predict.proto

package predict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KPredictionServiceClient is the client API for KPredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KPredictionServiceClient interface {
	KPredict(ctx context.Context, in *KPredictRequest, opts ...grpc.CallOption) (*KPredictResponse, error)
}

type kPredictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKPredictionServiceClient(cc grpc.ClientConnInterface) KPredictionServiceClient {
	return &kPredictionServiceClient{cc}
}

func (c *kPredictionServiceClient) KPredict(ctx context.Context, in *KPredictRequest, opts ...grpc.CallOption) (*KPredictResponse, error) {
	out := new(KPredictResponse)
	err := c.cc.Invoke(ctx, "/predict.KPredictionService/KPredict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KPredictionServiceServer is the server API for KPredictionService service.
// All implementations must embed UnimplementedKPredictionServiceServer
// for forward compatibility
type KPredictionServiceServer interface {
	KPredict(context.Context, *KPredictRequest) (*KPredictResponse, error)
	mustEmbedUnimplementedKPredictionServiceServer()
}

// UnimplementedKPredictionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKPredictionServiceServer struct {
}

func (UnimplementedKPredictionServiceServer) KPredict(context.Context, *KPredictRequest) (*KPredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KPredict not implemented")
}
func (UnimplementedKPredictionServiceServer) mustEmbedUnimplementedKPredictionServiceServer() {}

// UnsafeKPredictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KPredictionServiceServer will
// result in compilation errors.
type UnsafeKPredictionServiceServer interface {
	mustEmbedUnimplementedKPredictionServiceServer()
}

func RegisterKPredictionServiceServer(s grpc.ServiceRegistrar, srv KPredictionServiceServer) {
	s.RegisterService(&KPredictionService_ServiceDesc, srv)
}

func _KPredictionService_KPredict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KPredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPredictionServiceServer).KPredict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/predict.KPredictionService/KPredict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPredictionServiceServer).KPredict(ctx, req.(*KPredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KPredictionService_ServiceDesc is the grpc.ServiceDesc for KPredictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KPredictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "predict.KPredictionService",
	HandlerType: (*KPredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KPredict",
			Handler:    _KPredictionService_KPredict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "predict.proto",
}
