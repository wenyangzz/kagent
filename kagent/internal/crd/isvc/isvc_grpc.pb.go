// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: isvc.proto

package isvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IsvcServiceClient is the client API for IsvcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IsvcServiceClient interface {
	GetIsvc(ctx context.Context, in *GetIsvcRequest, opts ...grpc.CallOption) (*GetIsvcResponse, error)
	CreateIsvc(ctx context.Context, in *CreateIsvcRequest, opts ...grpc.CallOption) (*IsvcNull, error)
	DeleteIsvc(ctx context.Context, in *DeleteIsvcRequest, opts ...grpc.CallOption) (*IsvcNull, error)
	ListIsvc(ctx context.Context, in *IsvcNull, opts ...grpc.CallOption) (*ListIsvcResponse, error)
}

type isvcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIsvcServiceClient(cc grpc.ClientConnInterface) IsvcServiceClient {
	return &isvcServiceClient{cc}
}

func (c *isvcServiceClient) GetIsvc(ctx context.Context, in *GetIsvcRequest, opts ...grpc.CallOption) (*GetIsvcResponse, error) {
	out := new(GetIsvcResponse)
	err := c.cc.Invoke(ctx, "/isvc.IsvcService/GetIsvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isvcServiceClient) CreateIsvc(ctx context.Context, in *CreateIsvcRequest, opts ...grpc.CallOption) (*IsvcNull, error) {
	out := new(IsvcNull)
	err := c.cc.Invoke(ctx, "/isvc.IsvcService/CreateIsvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isvcServiceClient) DeleteIsvc(ctx context.Context, in *DeleteIsvcRequest, opts ...grpc.CallOption) (*IsvcNull, error) {
	out := new(IsvcNull)
	err := c.cc.Invoke(ctx, "/isvc.IsvcService/DeleteIsvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isvcServiceClient) ListIsvc(ctx context.Context, in *IsvcNull, opts ...grpc.CallOption) (*ListIsvcResponse, error) {
	out := new(ListIsvcResponse)
	err := c.cc.Invoke(ctx, "/isvc.IsvcService/ListIsvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IsvcServiceServer is the server API for IsvcService service.
// All implementations must embed UnimplementedIsvcServiceServer
// for forward compatibility
type IsvcServiceServer interface {
	GetIsvc(context.Context, *GetIsvcRequest) (*GetIsvcResponse, error)
	CreateIsvc(context.Context, *CreateIsvcRequest) (*IsvcNull, error)
	DeleteIsvc(context.Context, *DeleteIsvcRequest) (*IsvcNull, error)
	ListIsvc(context.Context, *IsvcNull) (*ListIsvcResponse, error)
	mustEmbedUnimplementedIsvcServiceServer()
}

// UnimplementedIsvcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIsvcServiceServer struct {
}

func (UnimplementedIsvcServiceServer) GetIsvc(context.Context, *GetIsvcRequest) (*GetIsvcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsvc not implemented")
}
func (UnimplementedIsvcServiceServer) CreateIsvc(context.Context, *CreateIsvcRequest) (*IsvcNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIsvc not implemented")
}
func (UnimplementedIsvcServiceServer) DeleteIsvc(context.Context, *DeleteIsvcRequest) (*IsvcNull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIsvc not implemented")
}
func (UnimplementedIsvcServiceServer) ListIsvc(context.Context, *IsvcNull) (*ListIsvcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIsvc not implemented")
}
func (UnimplementedIsvcServiceServer) mustEmbedUnimplementedIsvcServiceServer() {}

// UnsafeIsvcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IsvcServiceServer will
// result in compilation errors.
type UnsafeIsvcServiceServer interface {
	mustEmbedUnimplementedIsvcServiceServer()
}

func RegisterIsvcServiceServer(s grpc.ServiceRegistrar, srv IsvcServiceServer) {
	s.RegisterService(&IsvcService_ServiceDesc, srv)
}

func _IsvcService_GetIsvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsvcServiceServer).GetIsvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isvc.IsvcService/GetIsvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsvcServiceServer).GetIsvc(ctx, req.(*GetIsvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsvcService_CreateIsvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIsvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsvcServiceServer).CreateIsvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isvc.IsvcService/CreateIsvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsvcServiceServer).CreateIsvc(ctx, req.(*CreateIsvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsvcService_DeleteIsvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIsvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsvcServiceServer).DeleteIsvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isvc.IsvcService/DeleteIsvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsvcServiceServer).DeleteIsvc(ctx, req.(*DeleteIsvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsvcService_ListIsvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsvcNull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsvcServiceServer).ListIsvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isvc.IsvcService/ListIsvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsvcServiceServer).ListIsvc(ctx, req.(*IsvcNull))
	}
	return interceptor(ctx, in, info, handler)
}

// IsvcService_ServiceDesc is the grpc.ServiceDesc for IsvcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IsvcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isvc.IsvcService",
	HandlerType: (*IsvcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIsvc",
			Handler:    _IsvcService_GetIsvc_Handler,
		},
		{
			MethodName: "CreateIsvc",
			Handler:    _IsvcService_CreateIsvc_Handler,
		},
		{
			MethodName: "DeleteIsvc",
			Handler:    _IsvcService_DeleteIsvc_Handler,
		},
		{
			MethodName: "ListIsvc",
			Handler:    _IsvcService_ListIsvc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isvc.proto",
}
